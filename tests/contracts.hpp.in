#pragma once

#include <eosio/testing/tester.hpp>

namespace eosio { namespace testing {

struct contracts {
   //static std::vector<uint8_t> system_wasm() { return read_wasm("${EOSIO_ROOT}/eosio.contracts/build/contracts/eosio.system/eosio.system.wasm"); }
   //static std::vector<char>    system_abi() { return read_abi("${EOSIO_ROOT}/eosio.contracts/build/contracts/eosio.system/eosio.system.abi"); }
   static std::vector<uint8_t> token_wasm() { return read_wasm("${EOSIO_ROOT}/eosio.contracts/build/contracts/eosio.token/eosio.token.wasm"); }
   static std::vector<char>    token_abi() { return read_abi("${EOSIO_ROOT}/eosio.contracts/build/contracts/eosio.token/eosio.token.abi"); }
   //static std::vector<uint8_t> msig_wasm() { return read_wasm("${EOSIO_ROOT}/eosio.contracts/build/contracts/eosio.token/eosio.msig.wasm"); }
   //static std::vector<char>    msig_abi() { return read_abi("${EOSIO_ROOT}/eosio.contracts/build/contracts/eosio.token/eosio.msig.abi"); }

   static std::vector<uint8_t> kata1_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../../build/kata1/kata1.wasm"); }
   static std::vector<char>    kata1_abi() { return read_abi("${CMAKE_BINARY_DIR}/../../build/kata1/kata1.abi"); }
};

}}